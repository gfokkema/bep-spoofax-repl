#+TITLE:Research Report Notes
* Preface
These are notes for the research report. The relevant papers for each
subject are linked. A useful course by the Spoofax team with relevant
lecture slides can be found here:
[[http://tudelft-in4303.github.io/lectures/]].
* Dynamic Semantics
Dynamic semantics[fn:lecture-dynsem: Relevant lecture:
http://tudelft-in4303.github.io/lectures/specification/dynamic-semantics]
(also known as /execution semantics/) and refer to the semantics of
what a program in some language does when executed
[fn:dynamic-semantics: Reference?].

There are multiple approaches to formally specify the dynamic
semantics of a language. Among those approaches are /small-step style/
semantics[fn:lecture-ucolorado: See for example
[[http://ecee.colorado.edu/~siek/ecen5013/spring10/lecture3.pdf]]],
/big-step style/ semantics and translating to a different language.
** TODO Dynamic Semantics using Stratego (possible?)
** DynSem
DynSem[fn:dynsem: Relevant paper: [[http://swerl.tudelft.nl/twiki/pub/Main/TechnicalReports/TUD-SERG-2015-003.pdf][DynSem: A DSL for Dynamic Semantics
Specification]].] is a DSL for specifying the /dynamic semantics/ of a
language.  Often the formal specification of the dynamic semantics of
a program are separate from the implementation of the language. The
goal of DynSem is to unify both of these, by providing a syntax that
is readable as a formal specification, and can also serve as the
source for generating the execution engine of a programming language.
** Reduction Rules
With DynSem, the dynamic semantics are specified by reduction rules in
either small-step style or big-step style[fn:prefer-big-step: DynSem
prefers big-step style, as it can optimize rules of that type better.].
