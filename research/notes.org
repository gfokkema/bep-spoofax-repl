#+TITLE:Research Report Notes
* Preface
These are notes for the research report. The relevant papers for each
subject are linked.
* What is Spoofax?
:PROPERTIES:
:EXPORT_FILE_NAME: spoofax-org-export
:END:
#+LATEX_CLASS: article-shifted
Spoofax is a platform that allows for giving a completely
/declarative/ definition of a programming language and accompanying
IDE support\nbsp\cite{Kats10a}. Such a platform is called a /language
workbench/. The definition of a programming language is done using
high-level /meta-languages/ for each aspect of the programming
language.

To define a language declaratively means that one uses the
meta-languages to specify /what/ the properties of a language are, not
/how/ these properties are implemented. For example, instead of asking
/​"How do I implement a tokenizer and parser for my language?"​/, one
asks /​"What is the syntax of my language?"​/. From such a description
in a meta-language, the tokenizer and parser can be derived without
the designer of the language ever having to care about its
implementation.

This section goes over the aspects that come into play with the
development of a language and how Spoofax tackles each of these
aspects. First, the section goes over the elements that make up the
specification of a language[fn:comp-constr-course:This section follows
the structure of the language specification portion of the compiler
construction course at the TU Delft. The slides can be found here:
[[http://tudelft-in4303.github.io/lectures/specification/]].]. A language
specification consists of the following conceptual steps:

1. [[#sec:syntax-def][Syntax Definition]]: The first step defines what textual
   representations of a program are syntactically valid. A parser
   provides an implementation of this definition, by mapping a textual
   representation of a program to an abstract syntax tree (AST)
   representation. In Spoofax, the syntax is declared with a DSL
   called SDF.
2. [[#sec:static-analysis][Static Semantics]]: The AST then goes through static analysis (type
   checking, name binding and variable scoping), to test if the
   program is well-formed. Static semantics describe the rules for the
   static analysis step. Spoofax provides two DSLs for the
   specification of this step: the TS type specification language and
   the NaBL name binding language.
3. [[#sec:term-rewrite][Term Rewriting and Program Transformation]]: Optionally, a
   well-formed AST can then be transformed, for example for desugaring
   or optimization. Spoofax provides Stratego for this step.
4. [[#sec:dynamic-semantics][Dynamic Semantics]]: Next the optionally transformed AST is either
   compiled or interpreted, thereby providing a means of
   execution. Dynamic semantics define what the behaviour is of a
   program upon execution. In Spoofax, the dynamic semantics can be
   defined with either Stratego or a DSL called DynSem.

After that, this section concludes with a discussion on the other
aspect of a language: its integrated development environment
(IDE). Spoofax provides IDE support by means of its Editor Services.
** Syntax Definition
:PROPERTIES:
:CUSTOM_ID: sec:syntax-def
:END:
The first part of the specification of a language is its syntax. The
syntax of a language is often specified by means of a /lexical
grammar/ and a /context-free grammar/, as can be seen in the
specification of, for example, Standard ML\nbsp\cite{Milner97}. The
lexical grammar is most often defined using regular expressions. It
defines the individual words made up of characters, such as
identifiers and numeric constants. The context-free grammar then
defines syntactically valid sentences made up of words.

*** SDF3: syntax definition in Spoofax
To specify a syntax definition declaratively in Spoofax, a domain
specific language (DSL) called /SDF3/\nbsp\cite{Vollebregt12} is used.
SDF3 is the third generation of the /Syntax Definition Formalism/
(SDF)\nbsp\cite{Heering89}. It uses only context-free grammer
productions for the specification of both the lexical syntax and the
context-free syntax, a feature that was introduced in
SDF2\nbsp\cite{Visser97}.

The declarative nature of SDF3 allows for thinking in terms of the
structure (the /what/), instead of in terms of parser algorithms (the
/how/) as is the case with many current parser generators such as
ANTLR and YACC\nbsp\cite{Kats10b}. The syntax definition is used to
make parsers that parse a textual representation of a program into its
AST and pretty-printers for mapping ASTs back to text. However, due to
its declarative nature, SDF3 is not limited to generating parsers and
pretty printers: it can also be used for error recovery
rules\nbsp\cite{deJonge12}, syntax highlighting rules and folding
rules for editors (see section [[#sec:editor-serv]]).

All of the other parts of Spoofax use the AST that is produced by a
parser generated from an SDF3 specification.
** Static Semantics
:PROPERTIES:
:CUSTOM_ID: sec:static-analysis
:END:
Static semantics refer to the meaning of what a well-formed program is
for a particular language\nbsp\cite{Milner97}. This imposes more
constraints than syntax definition, such as name binding, scoping
rules and type checking. These cannot be specified by a syntax
definition alone and are thus considered separately.
*** Declarative static semantics specification in Spoofax
In Spoofax, all the static semantics as well as the dynamic semantics
used to be specified with the /Stratego/ transformation language
(which is discussed in section [[#sec:term-rewrite]]). Nowadays, two
high-level DSLs exist for specifying static semantics declaratively:
NaBL and TS. The two DSLs can work together: for instance, the type of
a variable can be set with NaBL, so that TS can be used to make
assertions on the type of that variable.
*** NaBL: the Name Binding Language
:PROPERTIES:
:CUSTOM_ID: sec:nabl
:END:
With /NaBL/ (pronounced /enable/), name binding and scoping rules can
be specified declaratively\nbsp\cite{KonatKWV12}. Here is an example
of the name binding and scoping rules for a class, from the /paplj/
language[fn:paplj:paplj is used as an exercise language for the
"Declare Your Language" book, which is a work-in-progress at the time
of writing. More information can be found here:
https://github.com/MetaBorgCube/declare-your-language]
#+LATEX: \lstset{language=nabl,numbers=left}
#+ATTR_LATEX: :environment lstlisting
#+BEGIN_EXAMPLE
namespaces Program Class Field Method Variable
// ...
binding rules
  Class(c, _, _, _) :
    defines Class c of type ClassT(c)
    // Declare new scope
    scopes Field, Method, Variable
    implicitly defines Variable This() of type ClassT(c)

  Extends(c) :
    // Import namespaces from superclass
    imports Field, Method from Class c
#+END_EXAMPLE
The first line declares the /namespaces/ to consider. A namespace is a
way to distinguish different kinds of
names\nbsp\cite{KonatKWV12}. Then for each node in the AST resulting
from the parsing, for example a =Class= node, the name binding and
scoping rules can be defined. In the example, each =Class= node
declares a new scope for its fields, methods and variables. It also
implicitly defines the =this= variable. The =Extends= node can then
import the fields and methods into its scope.

As can be seen from line 8, it can also associate type information
with names to interplay with TS. The type annotations can also be used
for instance when desugaring or rewriting with Stratego (see section
[[#sec:term-rewrite]]).
*** TS: the Type Specification language
Type checking can be done by specifying typing rules with the /TS/
DSL. Again an example of the paplj language:
#+LATEX: \lstset{language=type-spec,numbers=left}
#+ATTR_LATEX: :environment lstlisting
#+BEGIN_EXAMPLE
type rules
  Class(c1, Extends(c2), _, _) :-
    where store ClassT(c1) <sub: ClassT(c2)

  x@This() : t
    where definition of x : t
// ...
type rules
  Add(e1, e2) : NumT()
    where e1 : NumT() else error "number expected" on e1
      and e2 : NumT() else error "number expected" on e2

#+END_EXAMPLE
Rules can recursively set constraints on AST-nodes, such as the =Add=
node in the above example.

Again, in line 5, interplay can be seen between TS an NaBL. Here the
type of a variable can be accessed, which is set in the NaBL
specification (see the previous section [[#sec:nabl]]).
** Term Rewriting and Program Transformation
:PROPERTIES:
:CUSTOM_ID: sec:term-rewrite
:END:
Sometimes the AST needs some form of transformation before it is to be
compiled or executed, for example to transform it to a canonical form,
or to perform optimizations such as constant folding. Program
transformations are specified by /term rewrite rules/: The left-hand
side of a rule introduces a pattern (for example $x + x$), and the
right-hand side specifies a replacement for it (e.g. $2\cdot x$).
*** Rewriting using Stratego
Spoofax offers a DSL called /Stratego/ for specifying program
transformation with rewrite rules\nbsp\cite{Visser01}. Stratego can be
seen as the most general part of Spoofax: before NaBL and TS, Stratego
was used for specifying the static semantics. Moreover, being a
program transformation language, it can also serve as a compiler and
can thus be used to specify the dynamic semantics.

An example of a rewrite rule for the paplj language is given below.
#+LATEX: \lstset{language=stratego,numbers=left}
#+ATTR_LATEX: :environment lstlisting
#+BEGIN_EXAMPLE
rules
  desugar-let :
  	Let([], e) -> e

  desugar-let :
  	Let([b1, b2 | bs], e) -> Let([b1], Let([b2 | bs], e))
#+END_EXAMPLE
This desugars a =let= expression with multiple bindings into multiple
nested =let= expressions each having just one binding.

To construct the main algorithm of the program transformation,
Stratego has the notion of /strategies/. A strategy is used to specify
where and in what order the rewrite rules are applied to an
AST. Another example from paplj is given below:
#+LATEX: \lstset{language=stratego,numbers=left}
#+ATTR_LATEX: :environment lstlisting
#+BEGIN_EXAMPLE
strategies
  pre-desugar =
    innermost(desugar-let <+ desugar-do)

  post-desugar =
    innermost(desugar-do <+ desugar-get <+ desugar-set);
    resugar
#+END_EXAMPLE
The strategy =innermost= in this example is used to apply the strategy
given as parameter (a composition of rewrite rules) in a specific
traversal order on the AST nodes.
** Dynamic Semantics
:PROPERTIES:
:CUSTOM_ID: sec:dynamic-semantics
:END:
Dynamic semantics refers to how a program written in some language
behaves\nbsp\cite{Winskel93}. There are multiple approaches to
formally specify the dynamic semantics of a programming language (for
an extensive treatment, see\nbsp\cite{Winskel93}). For this section
only one sort of approach is relevant, namely /operational semantics/.
*** DynSem: rule-based dynamic semantics
:PROPERTIES:
:CUSTOM_ID: ssec:dynsem
:END:
In Spoofax, the dynamic semantics of a language used to be specified
with Stratego. However, the Spoofax team has developed a more
high-level method to declare the dynamic semantics of a language,
namely a DSL called /DynSem/\nbsp\cite{VerguNV15}. As with all DSLs in
Spoofax, DynSem offers a declarative approach to generate the
/implementation/ out of the /specification/. Indeed, from a DynSem
specification of a language, an interpreter for that language can be
generated.

In DynSem, the dynamic semantics are specified by means of rules. To
show how rules can define the dynamic semantics of a language,
consider the classic example of the \beta-reduction, which defines
function application in the lambda calculus. The rule replaces all the
occurences of the parameter $x$ with the argument $e_2$, within the
expression $e_1$:

\begin{equation}
(\lambda x.e_1) e_2 \rightarrow e_1[x := e_2]
\end{equation}

In a similar way, dynamic semantics can be specified in DynSem, in a
syntax very similar to the formal syntax used in the literature. Take
here the example of defining method calling in paplj:
#+LATEX: \lstset{language=dynsem,numbers=left}
#+ATTR_LATEX: :environment lstlisting
#+BEGIN_EXAMPLE
rules
  // ...
  Call(o, m, vs: List(V)) --> v'
    where lookupMethod(o, m) --> Method(_, _, params, e);
          This o, Env bindVars(params, vs) |- e --> v'.
#+END_EXAMPLE
The bottom line represents the rule of the method body, $e$,
evaluating to the return value $v'$, by binding the argument values to
the parameter in the environment and binding the =this= variable to
the object on which the method is called. Exactly how $e$ evaluates to
$v'$ is defined using other rules, which are left out in this example.
#+LATEX: \lstset{numbers=none}

** Editor Services
:PROPERTIES:
:CUSTOM_ID: sec:editor-serv
:END:
This section concludes with a brief description of editor services,
which provide the IDE support for languages defined in
Spoofax. Examples of such services include an outline view, menus in
which one can bind actions to menu buttons (see figure
[[fig:menu-actions]]), but also syntax highlighting and code folding
rules[fn:editor-serv-web:More services are listed on the Spoofax
website: http://www.metaborg.org/spoofax/editor-services/].

#+ATTR_LATEX: :width 0.6\textwidth
#+CAPTION: A menu action for the paplj language defined using Spoofax. The bottom window shows the menu definition, the top window shows a program written in paplj.
#+NAME: fig:menu-actions
[[./img/menu-actions.png]]

Editor services are defined using a DSL, shown in the bottom window of
figure [[fig:menu-actions]]. In the case of menus, their actions are
specified using Stratego. Via Stratego these actions can even be
specified in Java. As such, Spoofax allows for defining arbitrarily
complex IDE actions.

Many of these editor services such as syntax highlighting and code
folding rules can be derived from the syntax
definition\nbsp\cite{Kats10c} and can be further customized if
needed. Taken together with the language definition, the editor
services provide a language with a complete and state-of-the-art IDE
experience\nbsp\cite{Kats10a}.
* References
:PROPERTIES:
:UNNUMBERED: t
:END:
#+BIBLIOGRAPHY: references plain
